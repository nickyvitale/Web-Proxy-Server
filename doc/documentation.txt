In order to use this application, you must first run ./make in the top most directory. This will create an executable binary file: myproxy. As the name suggests, it is a TCP web proxy server. It's main functionality is to accept http 1.1 requests from clients using a multithreaded model and to convert them to https requests and sending them to the appropriate web server. Likewise, the proxy must forward the response it receives from the web server back to the original client. 

The proper way to run the server (from the top directory) is:
./bin/mysproxy portnumber forbiddenFilePath accessLogPath
Where the port number should be between 1024-65535, the forbiddenFilePath is the path to a text file that contains a list of forbidden sites, and the accessLogPath is the name of the file that will store an information log for each completed request.

The access log has entries in the following form:
Timestamp clientIP firstLineOfRequest responseCode contentSize

Design of application:
The main function of the application is an infinite loop that uses accept() to accept connections from clients, and then handles each connection by creating a thread for each one. Inside the function that each thread executes, first the request from the client is read into a buffer. Then, it is parsed for the port, host name, document path, and request type (GET, etc). With that information, the proxy then determines whether or not the request is legal by checking the list of forbidden sites against the host name given in the request. Additionally, there is lots of verification for misformatting, etc. After the verification is complete, the proxy needs to send the request to the web server. In order to do this, the OpenSSL library is used. This library basically allows the proxy to reach the web server with the TLS protocol (basically secures/protects the communication). After sending the request to the web server, the proxy reads the response, and sends it back to the client. Finally, a line is written to the log that stores essential information about the handled request.

Another thing that must be noted is that the list of forbidden sites can be updated during the server's lifecycle. In order to do so, alter the file containing the list of servers, and then click Control-C in the terminal in which the server is running. This will trigger a SIGINT signal to the server, which will subsequently run a function that destroys and recreates the list of forbidden sites from scratch. In order to make sure that there are no concurrency issues, a mutex is used to verify that the forbidden sites list is not being accessed by any thread when this update occurs.

Test Cases:
The first test is to just run a simple wget request. This is essentially just to test that the main functionality works. The following lines of code execute this test case:

./bin/myproxy 9000 forbSites log.txt 
wget www.example.com -e use_proxy=yes -e http_proxy=127.0.0.1:9000

2.) The second test case is to see what happens when an invalid port is given in the request. The point of this is to test the verifying mechanism. The expected response is a 400 Bad Request response.

./bin/myproxy 9000 forbSites log.txt 
curl -x http://127.0.0.1:9000/ http://www.example.com:badport

3.) The third test case is for when the https:// is used in the request instead of http://. The main purpose of this is to test that the program will properly respond to a method other than GET or HEAD (since only those two are supported by the proxy server). The expected result is a 501 Not Implemented response.

./bin/myproxy 9000 forbSites log.txt 
curl -x http://127.0.0.1:9000/ https://www.example.com

4.) The fourth test is to request a site that is included in the forbidden sites file. This should result in a 403 Forbidden response. Likewise, after removing the site from the forbidden sites file and clicking control-c on the server's terminal, one should be able to re-run the same request and this time get a non-forbidden response.

./bin/myproxy 9000 forbSites log.txt 
curl -x http://127.0.0.1:9000/ www.someforbiddensite.com

5.) The fifth test is to input an invalid request, in which either the host cannot be resolved or the file path doesn't exist. The expected result is a 404 Not Found response.

./bin/myproxy 9000 forbSites log.txt 
curl -x http://127.0.0.1:9000/ www.notarealsitetrollololololololololol.com
